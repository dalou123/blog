(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{511:function(a,t,r){"use strict";r.r(t);var e=r(1),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[a._v("Performance 可以记录站点在运行过程中的性能数据，有了这些性能数据，就可以回放整个页面的执行过程，这样就方便我们来定位和诊断每个时间段内页面的运行情况，从而有效的找出页面的性能瓶颈。")])]),t("h2",{attrs:{id:"配置-performance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-performance"}},[a._v("#")]),a._v(" 配置 Performance")]),a._v(" "),t("p",[a._v("各种配置及说明如图所示：\n"),t("img",{attrs:{src:"/images/performmance.png",alt:"img"}}),a._v("\nPerformance 不仅可以录制加载阶段的性能数据，还可以录制交互阶段，不过交互阶段的录制需要手动停止录制过程。")]),a._v(" "),t("p",[a._v("观察下图的报告页，我们可以将它分为三个主要的部分，分别为概览面板、性能指标面板和详情面板。\n"),t("img",{attrs:{src:"/images/performmance02.png",alt:"img"}})]),a._v(" "),t("p",[a._v("在概览面板中，Performance 就会将几个关键指标，诸如页面帧速 (FPS)、CPU 资源消耗、网络请求流量、V8 内存使用量 (堆内存) 等，按照时间顺序做成图表的形式展现出来，可以参看上图。")]),a._v(" "),t("ul",[t("li",[a._v("如果 FPS 图表上出现了红色块，那么就表示红色块附近渲染出一帧所需时间过久，帧的渲染时间过久，就有可能导致页面卡顿。")]),a._v(" "),t("li",[a._v("如果 CPU 图形占用面积太大，表示 CPU 使用率就越高，那么就有可能因为某个 JavaScript 占用太多的主线程时间，从而影响其他任务的执行。")])]),a._v(" "),t("p",[a._v("除了以上指标以外，概览面板还展示加载过程中的几个关键时间节点，如 FP、LCP、DOMContentLoaded、Onload 等事件产生的时间点。")]),a._v(" "),t("h2",{attrs:{id:"main-指标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-指标"}},[a._v("#")]),a._v(" Main 指标")]),a._v(" "),t("p",[a._v("在性能面板中，记录了非常多的性能指标项，比如 Main 指标记录渲染主线程的任务执行过程，Compositor 指标记录了合成线程的任务执行过程，GPU 指标记录了 GPU 进程主线程的任务执行过程。有了这些详细的性能数据，就可以帮助我们轻松地定位到页面的性能问题。")]),a._v(" "),t("p",[a._v("简而言之，我们通过概览面板来定位问题的时间节点，然后再使用性能面板分析该时间节点内的性能数据。具体地讲，比如概览面板中的 FPS 图表中出现了红色块，那么我们点击该红色块，性能面板就定位到该红色块的时间节点内了。")]),a._v(" "),t("p",[a._v("因为浏览器的渲染机制过于复杂，所以渲染模块在执行渲染的过程中会被划分为很多子阶段，输入的 HTML 数据经过这些子阶段，最后输出屏幕上的像素，我们把这样的一个处理流程叫做渲染流水线。一条完整的渲染流水线包括了解析 HTML 文件生成 DOM、解析 CSS 生成 CSSOM、执行 JavaScript、样式计算、构造布局树、准备绘制列表、光栅化、合成、显示等一系列操作。")]),a._v(" "),t("p",[a._v("渲染流水线主要是在渲染进程中执行的，在执行渲染流水线的过程中，渲染进程又需要网络进程、浏览器进程、GPU 等进程配合，才能完成如此复杂的任务。另外在渲染进程内部，又有很多线程来相互配合。具体的工作方式你可以参考下图：\n"),t("img",{attrs:{src:"/images/performmance03.png",alt:"img"}}),a._v(" "),t("img",{attrs:{src:"/images/performmance04.png",alt:"img"}}),a._v("\n观察上图，一段段横条代表执行一个个任务，长度越长，花费的时间越多；竖向代表该任务的执行记录。我们知道主线程上跑了特别多的任务，诸如渲染流水线的大部分流程，JavaScript 执行、V8 的垃圾回收、定时器设置的回调任务等等，因此 Main 指标的内容非常多，而且非常重要，所以我们在使用 Perofrmance 的时候，大部分时间都是在分析 Main 指标。")])])}),[],!1,null,null,null);t.default=n.exports}}]);