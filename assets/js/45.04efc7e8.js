(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{499:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"常用字符串方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用字符串方法"}},[s._v("#")]),s._v(" 常用字符串方法")]),s._v(" "),t("p",[t("img",{attrs:{src:"/images/js2-1.png",alt:"img"}})]),s._v(" "),t("h3",{attrs:{id:"获取字符串长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取字符串长度"}},[s._v("#")]),s._v(" 获取字符串长度")]),s._v(" "),t("p",[s._v("JavaScript中的字符串有一个length属性，该属性可以用来获取字符串的长度")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出结果：5")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"获取字符串指定位置的值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取字符串指定位置的值"}},[s._v("#")]),s._v(" 获取字符串指定位置的值")]),s._v(" "),t("p",[s._v("charAt()和charCodeAt()方法都可以通过索引来获取指定位置的值：")]),s._v(" "),t("ul",[t("li",[s._v("charAt()方法返回的是指定位置的字符")]),s._v(" "),t("li",[s._v("charCodeAt()方法返回的是指定位置的字符的ASCII码")])]),s._v(" "),t("h3",{attrs:{id:"检索字符串是否包含特定序列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#检索字符串是否包含特定序列"}},[s._v("#")]),s._v(" 检索字符串是否包含特定序列")]),s._v(" "),t("p",[s._v("有5个方法都可以用来检索一个字符串中是否包含特定的序列。其中前两个方法得到的指定元素的索引值，并且只会返回第一次匹配到的值的位置。后三个方法返回的是布尔值，表示是否匹配到指定的值。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：这5个方法都对大小写敏感！")])]),s._v(" "),t("h4",{attrs:{id:"indexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexof"}},[s._v("#")]),s._v(" indexOf()")]),s._v(" "),t("p",[t("code",[s._v("indexOf()")]),s._v("：查找某个字符，有则返回第一次匹配到的位置，否则返回-1")]),s._v(" "),t("h4",{attrs:{id:"lastindexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lastindexof"}},[s._v("#")]),s._v(" lastIndexOf()")]),s._v(" "),t("p",[t("code",[s._v("lastIndexOf()")]),s._v("：查找某个字符，有则返回最后一次匹配到的位置，否则返回-1")]),s._v(" "),t("h4",{attrs:{id:"includes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#includes"}},[s._v("#")]),s._v(" includes()")]),s._v(" "),t("p",[t("code",[s._v("includes()")]),s._v("：该方法用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 true，否则返回 false。")]),s._v(" "),t("h4",{attrs:{id:"startswith"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#startswith"}},[s._v("#")]),s._v(" startsWith()")]),s._v(" "),t("p",[t("code",[s._v("startsWith()")]),s._v("：该方法用于检测字符串是否以指定的子字符串开始。如果是以指定的子字符串开头返回 true，否则 false。")]),s._v(" "),t("h4",{attrs:{id:"endswith"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#endswith"}},[s._v("#")]),s._v(" endsWith()")]),s._v(" "),t("p",[t("code",[s._v("endsWith()")]),s._v("：该方法用来判断当前字符串是否是以指定的子字符串结尾。如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false。")]),s._v(" "),t("h3",{attrs:{id:"连接多个字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接多个字符串"}},[s._v("#")]),s._v(" 连接多个字符串")]),s._v(" "),t("p",[s._v("concat() 方法用于连接两个或多个字符串。该方法不会改变原有字符串，会返回连接两个或多个字符串的新字符串。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("concat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" string2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" stringX"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"字符串分割成数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串分割成数组"}},[s._v("#")]),s._v(" 字符串分割成数组")]),s._v(" "),t("p",[s._v("split() 方法用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("separator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// separator：必需。字符串或正则表达式，从该参数指定的地方分割 string。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"截取字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#截取字符串"}},[s._v("#")]),s._v(" 截取字符串")]),s._v(" "),t("p",[s._v("substr()、substring()和 slice() 方法都可以用来截取字符串。"),t("br"),s._v(" "),t("code",[s._v("slice()")]),s._v(" 方法用于提取字符串的某个部分，并以新的字符串返回被提取的部分。其语法如下：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("slice")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("start"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("end"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// start：必须。 要截取的片断的起始下标，第一个字符位置为 0。如果为负数，则从尾部开始截取。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// end：可选。 要截取的片段结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("code",[s._v("substr()")]),s._v(" 方法用于在字符串中抽取从开始下标开始的指定数目的字符。其语法如下：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("substr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("start"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"字符串大小写转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串大小写转换"}},[s._v("#")]),s._v(" 字符串大小写转换")]),s._v(" "),t("p",[s._v("toLowerCase() 和 toUpperCase()方法可以用于字符串的大小写转换。")]),s._v(" "),t("p",[t("code",[s._v("toLowerCase()")]),s._v("：该方法用于把字符串转换为小写。")]),s._v(" "),t("p",[t("code",[s._v("toUpperCase()")]),s._v("：该方法用于把字符串转换为大写。")]),s._v(" "),t("h3",{attrs:{id:"字符串模式匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串模式匹配"}},[s._v("#")]),s._v(" 字符串模式匹配")]),s._v(" "),t("p",[s._v("replace()、match()和search()方法可以用来匹配或者替换字符。")]),s._v(" "),t("p",[t("code",[s._v("replace()")]),s._v("：该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。其语法如下：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("searchvalue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newvalue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("该方法有两个参数：")]),s._v(" "),t("ul",[t("li",[s._v("searchvalue：必需。规定子字符串或要替换的模式的 RegExp 对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。")]),s._v(" "),t("li",[s._v("ewvalue：必需。一个字符串值。规定了替换文本或生成替换文本的函数。")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcdef"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"z"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出结果：abzdef")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("match()")]),s._v("：该方法用于在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。其语法如下：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regexp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"重复一个字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重复一个字符串"}},[s._v("#")]),s._v(" 重复一个字符串")]),s._v(" "),t("p",[s._v("repeat() 方法返回一个新字符串，表示将原字符串重复n次")]),s._v(" "),t("h3",{attrs:{id:"字符串转为数字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串转为数字"}},[s._v("#")]),s._v(" 字符串转为数字")]),s._v(" "),t("p",[s._v("parseInt()和parseFloat()方法都用于将字符串转为数字。")]),s._v(" "),t("p",[s._v("parseInt() 方法用于可解析一个字符串，并返回一个整数。其语法如下：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" radix"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// string：必需。要被解析的字符串。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// radix：可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("parseFloat() 方法可解析一个字符串，并返回一个浮点数。该方法指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。其语法如下：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("parseFloat 将它的字符串参数解析成为浮点数并返回。如果在解析过程中遇到了正负号（+ 或 -）、数字 (0-9)、小数点，或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数。同时参数字符串首位的空白符会被忽略。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.00"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出结果：10.00")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.01"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出结果：10.01")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-10.01"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出结果：-10.01")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"40.5 years"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出结果：40.5")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("如果参数字符串的第一个字符不能被解析成为数字，则 parseFloat 返回 NaN。")])])}),[],!1,null,null,null);t.default=e.exports}}]);