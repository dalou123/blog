(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{514:function(v,_,s){"use strict";s.r(_);var e=s(1),t=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"node-js特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-js特点"}},[v._v("#")]),v._v(" Node.js特点")]),v._v(" "),_("h2",{attrs:{id:"非阻塞异步io"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞异步io"}},[v._v("#")]),v._v(" 非阻塞异步io")]),v._v(" "),_("p",[v._v("列如，当访问数据库取得数据的时候，需要一段时间。在传统的单线程处理机制中，在执行了访问数据库代码之后，整个线程都将暂停下来，等待数据库放回结果，才能执行后面的代码，也就是说，I/O阻塞了代码的执行，极大地降低了程序的执行效率。")]),v._v(" "),_("p",[v._v("由于 Node.js 中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。")]),v._v(" "),_("p",[v._v("当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。")]),v._v(" "),_("p",[v._v("阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。所以，这是一种特别有哲理的解决方案：与其人多，但是好多人闲着；还不如一个人玩命，往死里干活儿。")]),v._v(" "),_("h2",{attrs:{id:"单线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单线程"}},[v._v("#")]),v._v(" 单线程")]),v._v(" "),_("p",[v._v("在 Java、PHP 或者 .net 等服务器端语言中，会为每一个客户端连接创建一个新的线程。而每个线程需要耗费大约2MB内存。也就是说，理论上，一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。要让Web应用程序支持更多的用户，就需要增加服务器的数量，而 Web 应用程序的硬件成本当然就上升了。")]),v._v(" "),_("p",[v._v("Node.js不为每个客户连接创建一个新的线程，而仅仅使用一个线程。当有用户连接了，就触发一个内部事件，通过非阻塞I/O、事件驱动机制，让 Node.js 程序宏观上也是并行的。使用 Node.js ，一个8GB内存的服务器，可以同时处理超过4万用户的连接。")]),v._v(" "),_("p",[v._v("另外，单线程带来的好处，操作系统完全不再有线程创建、销毁的时间开销。但是单线程也有很多弊端，会在 Node.js 的弊端详细讲解，请继续看")]),v._v(" "),_("h2",{attrs:{id:"事件驱动"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动"}},[v._v("#")]),v._v(" 事件驱动")]),v._v(" "),_("p",[v._v("在 Node.js 中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在 Node.js 中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，又有其他事件产生，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。")]),v._v(" "),_("p",[v._v("Node.js 底层是 C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。用事件驱动来完成服务器的任务调度，这是鬼才才能想到的。针尖上的舞蹈，用一个线程，担负起了处理非常多的任务的使命")]),v._v(" "),_("h2",{attrs:{id:"跨平台"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跨平台"}},[v._v("#")]),v._v(" 跨平台")]),v._v(" "),_("p",[v._v("起初，Node 只能在 Linux 平台上运行。后来随着 Node的发展，微软注意到了它的存在，并投入了一个团队帮助 Node 实现 Windows 平台的兼容，在v0.6.0版本发布时，Node 已经能够直接在 Window 平台运行了。 Node 是基于libuv实现跨平台的。")]),v._v(" "),_("h1",{attrs:{id:"node-js的弊端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-js的弊端"}},[v._v("#")]),v._v(" Node.js的弊端")]),v._v(" "),_("h2",{attrs:{id:"单线程带来的弊端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单线程带来的弊端"}},[v._v("#")]),v._v(" 单线程带来的弊端")]),v._v(" "),_("p",[v._v("Node.js中有一个特点就是单线程，它带来了很多好处，但是它也有弊端，单线程弱点如下。")]),v._v(" "),_("ol",[_("li",[v._v("无法利用多核CPU")]),v._v(" "),_("li",[v._v("错误会引起整个应用退出无法继续调用异步I/O")]),v._v(" "),_("li",[v._v("大量计算占用CPU导致无法继续调用异步I/O 以上确实是Node的弊端\n但是都会有一些对应的解决方案：\n"),_("strong",[v._v("弊端1:解决方案")])])]),v._v(" "),_("ul",[_("li",[v._v("一些管理工具比如pm2，forever 等都可以实现创建多进程解决多核 CUP 的利用率问题")]),v._v(" "),_("li",[v._v("在v0.8版本之前，实现多进程可以使用child_process")]),v._v(" "),_("li",[v._v("在v0.8版本之后，可以使用cluster模块，通过主从模式，创建多个工作进程解决多核CPU的利用率问题")])]),v._v(" "),_("p",[_("strong",[v._v("弊端2:解决方案")])]),v._v(" "),_("ul",[_("li",[v._v("Nnigx反向代理，负载均衡，开多个进程，绑定多个端口；")]),v._v(" "),_("li",[v._v("一些管理工具比如pm2，forever 等都可以实现进程监控，错误自动重启等")]),v._v(" "),_("li",[v._v("开多个进程监听同一个端口，使用Node提供的cluster模块；")]),v._v(" "),_("li",[v._v("未出现cluster之前，也可以使用child_process,创建多子线程监听一个端口")])]),v._v(" "),_("p",[_("strong",[v._v("弊端3:解决方案")])]),v._v(" "),_("ul",[_("li",[v._v("可以把大量的密集计算像上面一样拆分成多个子线程计算")])]),v._v(" "),_("h1",{attrs:{id:"node-js的应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-js的应用场景"}},[v._v("#")]),v._v(" Node.js的应用场景")]),v._v(" "),_("p",[v._v("Node.js适合用来开发什么样的应用程序呢？")]),v._v(" "),_("p",[v._v("善于I/O，不善于计算。因为Node.js最擅长的就是任务调度，如果你的业务有很多的 CPU 计算，实际上也相当于这个计算阻塞了这个单线程，就不太适合Node开发，但是也不是没有解决方案，只是说不太适合。")]),v._v(" "),_("p",[v._v("当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node.js非常适合。Node.js也非常适合与websocket配合，开发长连接的实时交互应用程序。")]),v._v(" "),_("p",[v._v("具体场景可以表现为如下：")]),v._v(" "),_("ul",[_("li",[v._v("第一大类：用户表单收集系统、后台管理系统、实时交互系统、考试系统、联网软件、高并发量的web应用程序；")]),v._v(" "),_("li",[v._v("第二大类：基于web、canvas等多人联网游戏；")]),v._v(" "),_("li",[v._v("第三大类：基于web的多人实时聊天客户端、聊天室、图文直播;")]),v._v(" "),_("li",[v._v("单页面浏览器应用程序；")]),v._v(" "),_("li",[v._v("第五大类：操作数据库、为前端和移动端提供基于json的API；")])])])}),[],!1,null,null,null);_.default=t.exports}}]);