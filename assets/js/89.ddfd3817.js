(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{541:function(t,v,_){"use strict";_.r(v);var a=_(1),r=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"一、梳理思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、梳理思想"}},[t._v("#")]),t._v(" 一、梳理思想")]),t._v(" "),v("h3",{attrs:{id:"思维三部曲"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#思维三部曲"}},[t._v("#")]),t._v(" 思维三部曲")]),t._v(" "),v("ul",[v("li",[t._v("是什么（What）")]),t._v(" "),v("li",[t._v("为什么（Why）")]),t._v(" "),v("li",[t._v("怎么做（How）")])]),t._v(" "),v("h3",{attrs:{id:"一个思想两个能力"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一个思想两个能力"}},[t._v("#")]),t._v(" 一个思想两个能力")]),t._v(" "),v("p",[t._v("要始终具备编程思想，和独立思考的能力、独立解决问题的能力。")]),t._v(" "),v("h3",{attrs:{id:"获取知识的四种途径"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#获取知识的四种途径"}},[t._v("#")]),t._v(" 获取知识的四种途径")]),t._v(" "),v("ul",[v("li",[t._v("比喻 - 像什么")]),t._v(" "),v("li",[t._v("类比 - 是什么")]),t._v(" "),v("li",[t._v("推导 - A->B->C->?")]),t._v(" "),v("li",[t._v("归纳 - 自我总结")])]),t._v(" "),v("h3",{attrs:{id:"站在更高的角度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#站在更高的角度"}},[t._v("#")]),t._v(" 站在更高的角度")]),t._v(" "),v("p",[t._v("不要总是埋头种地，也要抬头看天。")]),t._v(" "),v("p",[t._v("互联网思维：第一原则——利他原则")]),t._v(" "),v("p",[t._v("站在别人的角度考虑问题。")]),t._v(" "),v("p",[t._v("学技术用道家思想，融会贯通，内化吸收。")]),t._v(" "),v("p",[t._v("做产品用佛家思想，小步快跑，快速迭代。")]),t._v(" "),v("h2",{attrs:{id:"二、编程思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、编程思想"}},[t._v("#")]),t._v(" 二、编程思想")]),t._v(" "),v("ul",[v("li",[t._v("面向过程编程思想")]),t._v(" "),v("li",[t._v("面向对象编程思想")]),t._v(" "),v("li",[t._v("面向接口编程思想")]),t._v(" "),v("li",[t._v("面向服务编程思想")])]),t._v(" "),v("h3",{attrs:{id:"道家思想学编程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#道家思想学编程"}},[t._v("#")]),t._v(" 道家思想学编程")]),t._v(" "),v("p",[v("strong",[t._v("有道无术，术尚可求，有术无道，止于术!")]),t._v(" --- 《道德经》")]),t._v(" "),v("p",[t._v("道是思想（编程思想），术是方法（代码）。")]),t._v(" "),v("p",[t._v("大道至简，知行合一。")]),t._v(" "),v("h3",{attrs:{id:"佛家思想做产品"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#佛家思想做产品"}},[t._v("#")]),t._v(" 佛家思想做产品")]),t._v(" "),v("p",[v("strong",[t._v("看山是山，看山不是山，看山还是山。")]),t._v(" --- 《金刚经》")]),t._v(" "),v("ul",[v("li",[t._v("看山是山\n学会借用，看山是山，看的是山的本身、是现象；")]),t._v(" "),v("li",[t._v("看山不是山\n学会遗忘，看山不是山，看的是山背后的道理，是本质；")]),t._v(" "),v("li",[t._v("看山还是山\n学会学习，看山还是山，看的是现象和本质的统一，是融会贯通。")])]),t._v(" "),v("h3",{attrs:{id:"用批判性思维学编程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#用批判性思维学编程"}},[t._v("#")]),t._v(" 用批判性思维学编程")]),t._v(" "),v("p",[t._v("批判性思维是一种思维习惯，是对思考的思考。就是将别人思考过的问题在自己的大脑中再进行一次思考。")]),t._v(" "),v("h3",{attrs:{id:"面向对象编程思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象编程思想"}},[t._v("#")]),t._v(" 面向对象编程思想")]),t._v(" "),v("p",[t._v("万物皆对象，是面向对象编程思想的核心思想。")]),t._v(" "),v("h4",{attrs:{id:"面向对象三大特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象三大特性"}},[t._v("#")]),t._v(" 面向对象三大特性")]),t._v(" "),v("p",[t._v("封装、继承、多态")]),t._v(" "),v("ul",[v("li",[t._v("封装\n封装就是将对象的属性和行为抽象出来，包装到类中。")])]),t._v(" "),v("p",[t._v("属性：是名词，即变量；行为是动词，即方法。")]),t._v(" "),v("ul",[v("li",[t._v("继承\n继承是子类继承父类的属性和行为，使得子类具有父类的属性和行为。")]),t._v(" "),v("li",[t._v("多态\n多态就是多种形态，相同的属性和行为，却有不同的表现形式。")])]),t._v(" "),v("h4",{attrs:{id:"面向对象七大设计原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象七大设计原则"}},[t._v("#")]),t._v(" 面向对象七大设计原则")]),t._v(" "),v("p",[t._v("面向对象设计原则，为我们提供了方法和准则。")]),t._v(" "),v("h4",{attrs:{id:"开口合里最单依"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开口合里最单依"}},[t._v("#")]),t._v(" 开口合里最单依")]),t._v(" "),v("ul",[v("li",[t._v("开闭原则：面向扩展开放，面向修改关闭")]),t._v(" "),v("li",[t._v("面向接口原则：接口隔离原则")]),t._v(" "),v("li",[t._v("组合聚合原则")]),t._v(" "),v("li",[t._v("里氏替换原则")]),t._v(" "),v("li",[t._v("最少知识原则：迪米特法则")]),t._v(" "),v("li",[t._v("单一职责原则：一个类只做一种事，一个方法只做一件事")]),t._v(" "),v("li",[t._v("依赖倒置原则")])]),t._v(" "),v("h3",{attrs:{id:"面向接口编程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向接口编程"}},[t._v("#")]),t._v(" 面向接口编程")]),t._v(" "),v("p",[t._v("接口是为了处理各个对象之间的协作关系，是系统设计的关键组成部分，主要作用是为了将定义和实现进行分离，从而实现系统解耦的目的。")]),t._v(" "),v("h2",{attrs:{id:"三、开发思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、开发思想"}},[t._v("#")]),t._v(" 三、开发思想")]),t._v(" "),v("h3",{attrs:{id:"restful设计风格"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#restful设计风格"}},[t._v("#")]),t._v(" Restful设计风格")]),t._v(" "),v("blockquote",[v("p",[t._v("Representational State Transfer REST")])]),t._v(" "),v("p",[v("code",[t._v("REST")]),t._v(' 中文的含义是: "表征状态转移" 或 "表现层状态转化"。'),v("br"),t._v(" "),v("code",[t._v("Restful")]),t._v(" 是一种基于HTTP的应用设计风格，用来设计API接口规范。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("请求Method")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("描述")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("幂等性")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("GET")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("获取资源")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("幂等")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("POST")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("创建资源")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("非幂等")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("PUT")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("更新资源")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("幂等")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("DELETE")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("删除资源")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("幂等")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("PATCH")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("更新部分资源")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("非幂等")])])])]),t._v(" "),v("p",[t._v("例：")]),t._v(" "),v("ul",[v("li",[t._v("get /users：列出所有用户")]),t._v(" "),v("li",[t._v("get /users/id：根据id获取用户")]),t._v(" "),v("li",[t._v("post /user：新增用户")]),t._v(" "),v("li",[t._v("put /user/id：根据用户id更新用户")]),t._v(" "),v("li",[t._v("delete /user/id：根据用户id删除用户")])]),t._v(" "),v("h3",{attrs:{id:"幂等性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#幂等性"}},[t._v("#")]),t._v(" 幂等性")]),t._v(" "),v("p",[t._v("HTTP幂等，是指无论调用多少次都不会有不同结果的HTTP方法。")]),t._v(" "),v("p",[t._v("幂等性指的是作用于结果而非资源本身。即GET方法每次可能得到的结果不同，但并不影响资源本身；而POST方法调用多次都会产生新的资源。")]),t._v(" "),v("h3",{attrs:{id:"cap定理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cap定理"}},[t._v("#")]),t._v(" CAP定理")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("C—— 数据一致性")])]),t._v(" "),v("li",[v("p",[t._v("A—— 可用性")])]),t._v(" "),v("li",[v("p",[t._v("P—— 分区容错性")])])]),t._v(" "),v("p",[t._v("在分布式系统中，最多同时满足2个，要么是CP系统（金融、与钱相关），要么是AP系统（互联网系统）")]),t._v(" "),v("ul",[v("li",[t._v("CP系统，金融（钱）")]),t._v(" "),v("li",[t._v("AP系统，互联网系统")])]),t._v(" "),v("h3",{attrs:{id:"base理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[t._v("#")]),t._v(" BASE理论")]),t._v(" "),v("p",[t._v("BASE理论是对CAP定理的衍生，核心思想是AP系统即使无法保证强一致性，但应用程序可以采用适当的方式，来达到最终一致性。")]),t._v(" "),v("ul",[v("li",[t._v("基本可用：指出现故障时，保证核心功能可用，允许损失部分可用性；")]),t._v(" "),v("li",[t._v("软状态：指系统允许存在中间状态，例分布式副本、异步复制；")]),t._v(" "),v("li",[t._v("最终一致性：指经过一段时间后，最终达到一致性。")])]),t._v(" "),v("h3",{attrs:{id:"敏捷开发"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#敏捷开发"}},[t._v("#")]),t._v(" 敏捷开发")]),t._v(" "),v("blockquote",[v("p",[t._v("Agile 敏捷开发")])]),t._v(" "),v("p",[t._v("敏捷开发是一种以人为核心、迭代、循序渐进的项目管理方法。")]),t._v(" "),v("p",[t._v("敏捷开发是一种指导思想，在敏捷开发中，项目的构建被分隔为许多个子项目（产品-项目-模块）。")]),t._v(" "),v("p",[t._v("简单地说，敏捷开发不追求完美的设计，完美的代码；而是力求在很短的周期内，开发出产品的核心功能，尽快发布可用的版本，然后在后续的生产周期内，不断地迭代升级、完善产品。")]),t._v(" "),v("h4",{attrs:{id:"敏捷宣言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#敏捷宣言"}},[t._v("#")]),t._v(" 敏捷宣言")]),t._v(" "),v("ol",[v("li",[t._v("个体和互动 高于 流程和工具；")]),t._v(" "),v("li",[t._v("工作的软件 高于 详尽文档；")]),t._v(" "),v("li",[t._v("客户合作 高于 客户谈判；")]),t._v(" "),v("li",[t._v("响应变化 高于 遵循计划")])]),t._v(" "),v("h4",{attrs:{id:"敏捷开发实现方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#敏捷开发实现方式"}},[t._v("#")]),t._v(" 敏捷开发实现方式")]),t._v(" "),v("p",[t._v("敏捷开发有很多种方式，有"),v("code",[t._v("scrum")]),t._v("、"),v("code",[t._v("XP")]),t._v("（极限编程）等。其中"),v("code",[t._v("scrum")]),t._v("是比较流行的一种，而通常我们是将两者结合使用。")]),t._v(" "),v("h4",{attrs:{id:"scrum"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#scrum"}},[t._v("#")]),t._v(" Scrum")]),t._v(" "),v("p",[t._v("scrum注重于过程，用于项目管理。scrum主要有三大角色、三个工件、四大会议。")]),t._v(" "),v("p",[t._v("三个角色：产品负责人、流程管理员、项目团队")]),t._v(" "),v("p",[t._v("三个工件：产品清单、冲刺清单、燃尽图")]),t._v(" "),v("p",[t._v("四大会议：迭代计划会议、每日例会、评审会议、回顾会议")]),t._v(" "),v("ul",[v("li",[t._v("scrum三大角色")])]),t._v(" "),v("p",[t._v("scrum三大角色：产品经理（"),v("code",[t._v("product owner")]),t._v("）、项目经理（"),v("code",[t._v("scrum master")]),t._v("）、研发团队（"),v("code",[t._v("team")]),t._v("）。")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("产品经理")]),t._v("（product owner）负责整理用户故事（user story），定义其商业价值，对其进行排序；制定发布计划，对产品负责。")]),t._v(" "),v("li",[v("strong",[t._v("项目经理")]),t._v("（scrum master）负责召开各种会议，协调项目，为研发团队服务。")]),t._v(" "),v("li",[v("strong",[t._v("研发团队")]),t._v("（team）则由不同技能的开发人员组成，通过紧密协同，完成每一次迭代的目标，交付产品。")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("scrum三个工件\n产品清单（"),v("code",[t._v("product backlog")]),t._v("）、冲刺清单（"),v("code",[t._v("sprint backlog")]),t._v("）、燃尽图")])]),t._v(" "),v("li",[v("p",[t._v("scrum四大会议")])])]),t._v(" "),v("p",[t._v("迭代计划会议、每日例会、评审会议、回顾会议。")]),t._v(" "),v("ul",[v("li",[t._v("scrum的基本流程")])]),t._v(" "),v("ol",[v("li",[v("p",[t._v("产品经理负责整理用户故事user story，形成产品清单（product backlog）。")])]),t._v(" "),v("li",[v("p",[t._v("发布计划会议：制定冲刺清单")])])]),t._v(" "),v("p",[t._v("产品经理负责讲解user story，对其进行估算和排序，发布计划会议的产出就是制定出这一期迭代要完成的story列表，形成冲刺清单（sprint backlog）。")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("迭代计划会议：细化任务，分配任务。")])]),t._v(" "),v("p",[t._v("项目团队对每一个story进行任务分解，分解的标准是完成该story的所有任务，最终每个任务都有明确的负责人，并完成工时的初估计。")]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("每日例会：掌握任务进度。")])]),t._v(" "),v("p",[t._v("每天项目经理召集站立会议，团队成员回答昨天做了什么，今天计划做什么，有什么问题。")]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[v("p",[t._v("团队成员及时更新任务状态，从而更新燃尽图。")])]),t._v(" "),v("li",[v("p",[t._v("评审会议：发布RELEASE版本")])])]),t._v(" "),v("p",[t._v("当一个周期的小目标全部完成，并经过测试后，进行评审会议，发布RELEASE版本。")]),t._v(" "),v("ol",{attrs:{start:"7"}},[v("li",[v("p",[t._v("演示会议：迭代结束之后，召开演示会议，相关人员都受邀参加，团队负责向大家展示本次迭代取得的成果。期间大家的反馈记录下来，由PO整理，形成新的story。")])]),t._v(" "),v("li",[v("p",[t._v("回顾会议：项目团队对本期迭代进行总结，发现不足，制定改进计划，下一次迭代继续改进，已达到持续改进的效果")])])]),t._v(" "),v("h3",{attrs:{id:"极限编程-xp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#极限编程-xp"}},[t._v("#")]),t._v(" 极限编程（XP）")]),t._v(" "),v("p",[t._v("极限编程注重于实践，核心思想是沟通、简单、反馈、勇气、谦逊、TDD、持续集成、DevOps。实现小步快走、快速迭代。")]),t._v(" "),v("blockquote",[v("p",[t._v("国产开源软件禅道（zentao）支持敏捷开发流程,它集产品管理、项目管理、质量管理、文档管理、组织管理和事务管理于一体")])]),t._v(" "),v("h4",{attrs:{id:"devops"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#devops"}},[t._v("#")]),t._v(" DevOps")]),t._v(" "),v("p",[t._v("DevOps是开发和运维的合成词。其目标是加强开发人员、测试人员、运维人员之间的沟通协调。")]),t._v(" "),v("p",[t._v("那么要实现DevOps，就需要我们项目能够做到持续集成、持续交付、持续部署。")])])}),[],!1,null,null,null);v.default=r.exports}}]);